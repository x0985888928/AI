@using System.Text.Json
@model ML.NET.Models.PricePredictionInput
@{
    ViewData["Title"] = "價格預測";
    Layout = "~/Views/Shared/_Layout.cshtml";

    // 動態 JSON 字串
    var phoneOptsJson = ViewBag.PhoneOptionsJson as string ?? "{}";
    var historyJson = ViewBag.HistoryJson as string ?? "[]";

    // 預測結果
    var predicted = ViewBag.PredictedPrice as float?;
}

<h1>@ViewData["Title"]</h1>

@if (predicted.HasValue)
{
    <div class="alert alert-info">預測價格：<strong>@predicted.Value</strong></div>
}

<form asp-action="Predict" method="post">
    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(m => m.CompanyName)
                <select id="CompanyName" name="CompanyName" class="form-control"></select>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Brand)
                <select id="Brand" name="Brand" class="form-control"></select>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Version)
                <select id="Version" name="Version" class="form-control"></select>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.TYPE)
                <select id="TYPE" name="TYPE" class="form-control"></select>
            </div>
            <!-- ROM、MobileWeight、RAM、BatteryCapacity、LaunchedYear 數字輸入欄位 -->
        </div>
        <div class="col-md-8">
            <canvas id="historyChart" width="600" height="400"></canvas>
        </div>
    </div>
    <button type="submit" class="btn btn-primary mt-3">預測</button>
</form>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const options = @Html.Raw(phoneOptsJson);
            const history = @Html.Raw(historyJson);

            console.log('History data:', history);

            // 下拉聯動初始化
            const compEl  = document.getElementById('CompanyName');
            const brandEl = document.getElementById('Brand');
            const verEl   = document.getElementById('Version');
            const typeEl  = document.getElementById('TYPE');
            if (options.Companies && Array.isArray(options.Companies)) {
                compEl.innerHTML = '';
                options.Companies.forEach(c => compEl.add(new Option(c.Name, c.Name)));
            }
            function updateBrands() {
                const comp = options.Companies.find(c => c.Name === compEl.value);
                brandEl.innerHTML = '';
                if (comp && comp.Brands) comp.Brands.forEach(b => brandEl.add(new Option(b.Name, b.Name)));
                updateVersions(); updateTypes();
            }
            function updateVersions() {
                const comp  = options.Companies.find(c => c.Name === compEl.value);
                const brand = comp && comp.Brands.find(b => b.Name === brandEl.value);
                verEl.innerHTML = '';
                if (brand && brand.Versions) brand.Versions.forEach(v => verEl.add(new Option(v, v)));
            }
            function updateTypes() {
                const comp  = options.Companies.find(c => c.Name === compEl.value);
                const brand = comp && comp.Brands.find(b => b.Name === brandEl.value);
                typeEl.innerHTML = '';
                if (brand && brand.Types) brand.Types.forEach(t => typeEl.add(new Option(t, t)));
            }
            compEl.addEventListener('change', updateBrands);
            brandEl.addEventListener('change', () => { updateVersions(); updateTypes(); });
            updateBrands();

            // 若有歷史資料，繪製走勢圖
            if (Array.isArray(history) && history.length > 0) {
                const record0 = history[0];
                const keys = Object.keys(record0);
                // 優先使用 LaunchedYear 欄位，其次偵測含 date 的欄位，再用第一個欄位
                const yearKey = keys.find(k => k.toLowerCase().includes('launched'))
                    || keys.find(k => /date/i.test(k))
                    || keys[0];
                console.log('Using yearKey:', yearKey);

                // 取出所有年度值 (若為字串日期，自動轉年)
                const rawYears = history.map(x => {
                    const val = x[yearKey];
                    return typeof val === 'number'
                        ? val
                        : (new Date(val)).getFullYear();
                });
                const years = [...new Set(rawYears)].sort((a,b)=>a-b);
                console.log('Years labels:', years);

                // 根據 TYPE 欄位分組
                const typeKey = keys.find(k => /type/i.test(k));
                const types = typeKey
                    ? [...new Set(history.map(x => x[typeKey]))]
                    : ['價格'];

                // 組 datasets
                const datasets = types.map((t, i) => {
                    const data = years.map(y => {
                        const rec = history.find(x => {
                            const yVal = typeof x[yearKey] === 'number'
                                ? x[yearKey]
                                : (new Date(x[yearKey])).getFullYear();
                            return yVal === y && (!typeKey || x[typeKey] === t);
                        });
                        return rec ? rec.Price : null;
                    });
                    return {
                        label: t,
                        data: data,
                        fill: false,
                        tension: 0.4,
                        pointRadius: 5,
                        borderColor: `hsl(${i * 360 / types.length}, 70%, 50%)`
                    };
                });

                const ctx = document.getElementById('historyChart').getContext('2d');
                new Chart(ctx, {
                    type: 'line',
                    data: { labels: years, datasets: datasets },
                    options: {
                        responsive: false,
                        scales: {
                            x: { display: true, title: { display: true, text: 'Year' } },
                            y: { beginAtZero: false }
                        },
                        plugins: { legend: { display: true } }
                    }
                });
            } else {
                console.warn('No historical data to render chart');
            }
        });
    </script>
}
