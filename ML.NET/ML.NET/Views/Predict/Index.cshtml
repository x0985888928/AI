@model ML.NET.Models.PricePredictionInput
@{
    ViewData["Title"] = "Price Prediction";
}

<h1 class="mb-4">Price Prediction</h1>

<form asp-action="Predict" method="post" class="row g-3">
    @Html.AntiForgeryToken()

    <div class="col-md-6">
        <label class="form-label">Company</label>
        <select asp-for="CompanyName" id="CompanyName" asp-items="ViewBag.Companies" class="form-select">
            <option value="">-- Select Company --</option>
        </select>
    </div>

    <div class="col-md-6">
        <label class="form-label">Brand</label>
        <select asp-for="Brand" id="Brand" asp-items="ViewBag.Brands" class="form-select">
            <option value="">-- Select Brand --</option>
        </select>
    </div>

    <div class="col-md-6">
        <label class="form-label">Version</label>
        <select asp-for="Version" id="Version" asp-items="ViewBag.Versions" class="form-select">
            <option value="">-- Select Version --</option>
        </select>
    </div>

    <div class="col-md-6">
        <label class="form-label">Type</label>
        <select asp-for="TYPE" id="TYPE" asp-items="ViewBag.Types" class="form-select">
            <option value="">-- Select Type --</option>
        </select>
    </div>

    <!-- 其餘數值欄位，每個用 col-md-4 + form-control -->
    <div class="col-md-6">
        <label class="form-label">ROM (GB)</label>
        <input asp-for="ROM" id="ROM" type="number" class="form-control" placeholder="128" />
    </div>

    <!-- ... 依序把其他欄位加上 form-control ... -->

    <div class="col-12">
        <button type="submit" class="btn btn-primary">Predict</button>
    </div>
</form>

<div id="predCardRoot" class="mt-4"></div>

@if (ViewBag.PredictedPrice != null)
{
    @* <h2>Predicted Price: @ViewBag.PredictedPrice</h2> *@

    <canvas id="priceChart" width="600" height="300"></canvas>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    

    <script>
        document.addEventListener('DOMContentLoaded', () => {

            // ==== 1. 取得後端資料 ====
            const history   = @Html.Raw(ViewBag.HistoryJson);          // array of {CompanyName, Brand, Type, Year, Price}
            const predYear  = @ViewBag.PredictedYear;                  // 數字
            const predPrice = @ViewBag.PredictedPrice;                 // 數字
            const predType  = "@ViewBag.PredictedType";                // e.g. "Pro"

            // ==== 2. 統整所有年份 ====
            const yearsSet = new Set(history.map(h => h.LaunchedYear));
            yearsSet.add(predYear);                       // 把預測年份也加入
            const years = [...yearsSet].sort((a,b)=>a-b); // labels

            // ==== 3. 依 TYPE 分組 ====
            const groups = {};
            history.forEach(h => {
                if (!groups[h.Type]) groups[h.Type] = {};
                groups[h.Type][h.LaunchedYear] = h.Price;         // 以 (Year -> Price) 存
            });

            // ==== 4. 組成 Chart.js datasets ====
            const datasets = [];
            const palette  = ['#3b82f6','#10b981','#f59e0b','#8b5cf6','#ef4444']; // 隨意配幾個顏色
            let colorIdx = 0;

            Object.keys(groups).forEach(type => {
                const dataPoints = years.map(y => groups[type][y] ?? null); // 若該年沒資料填 null
                datasets.push({
                    label: type,
                    data : dataPoints,
                    fill : false,
                    borderWidth: 2,
                    borderColor: palette[colorIdx % palette.length],
                    tension: 0.3
                });
                colorIdx++;
            });

            // ==== 5. 預測值資料集 (單點) ====
            const predData = years.map(y => null);    // 全是 null
            predData[years.indexOf(predYear)] = predPrice;
            datasets.push({
                label: 'Predicted',
                data : predData,
                fill : false,
                borderColor: '#ef4444',
                backgroundColor: '#ef4444',
                pointRadius: 6,
                showLine: false
            });

            // ==== 6. 畫圖 ====
            new Chart(document.getElementById('priceChart'), {
                type: 'line',
                data: { labels: years.map(String), datasets },
                options: {
                    scales: {
                        y: { beginAtZero: false }
                    }
                }
            });
        });
    </script>

    <script type="text/babel">
        /* === 直接執行（不要再綁 DOMContentLoaded） === */

        const predicted = Number(@(ViewBag.PredictedPrice != null
        ? ViewBag.PredictedPrice.ToString(System.Globalization.CultureInfo.InvariantCulture)
        : "NaN"));

        const rootElem = document.getElementById('predCardRoot');

        console.log("predicted :", predicted);
        console.log("rootElem  :", rootElem);

        if (isNaN(predicted) || !rootElem) {
            console.log("No predicted value or root element — skip React card.");
        } else {

            const PredCard = () => {
                const [val, setVal] = React.useState(0);
                React.useEffect(() => {
                    let v = 0;
                    const id = setInterval(() => {
                        v += (predicted - v) * 0.15;
                        if (Math.abs(predicted - v) < 0.5) { v = predicted; clearInterval(id); }
                        setVal(v.toFixed(2));
                    }, 30);
                }, []);
                return (
                    <div className="alert alert-info fade show">
                        <h4 className="alert-heading">Predicted Price</h4>
                        <p className="display-6">${val}</p>
                    </div>
                );
            };

            ReactDOM.createRoot(rootElem).render(<PredCard />);
        }
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {

            // ===== 0. 解析整份靜態對照表 =====
            const phoneOpt = @Html.Raw(ViewBag.PhoneOptionsJson);

            // ===== 1. 元件引用 =====
            const selCompany = document.getElementById('CompanyName');
            const selBrand   = document.getElementById('Brand');
            const selType    = document.getElementById('TYPE');

            // ===== 2. 幫某個 <select> 填入 <option> =====
            function fillSelect(select, arr, selected){
                select.innerHTML = '<option value="">-- Select --</option>';
                arr.forEach(v=>{
                    const opt = document.createElement('option');
                    opt.value = opt.text = v;
                    if (v === selected) opt.selected = true;
                    select.appendChild(opt);
                });
            }

            // ===== 3. 初始依伺服器預設填 Brand/Type =====
            refreshBrandType(selCompany.value, selBrand.value, selType.value);

            // ===== 4. 監聽 Company → 重填 Brand & Type =====
            selCompany.addEventListener('change', () => {
                const company = selCompany.value;
                fillSelect(selBrand,   [], null);       // 清空
                fillSelect(selType,    [], null);
                refreshBrandType(company, null, null);
            });

            // ===== 5. 監聽 Brand → 重填 Type =====
            selBrand.addEventListener('change', ()=>{
                const company = selCompany.value;
                const brand   = selBrand.value;
                const compObj = phoneOpt.Companies.find(c=>c.Name===company);
                const brandObj= compObj?.Brands.find(b=>b.Name===brand);
                fillSelect(selType, brandObj?.Types ?? [], null);
            });

            // === helper：依 company / brand 初始化下級 ===
            function refreshBrandType(companySel, brandSel, typeSel){
                const compObj = phoneOpt.Companies.find(c => c.Name === companySel);
                const brands  = compObj?.Brands.map(b => b.Name) ?? [];
                fillSelect(selBrand, brands, brandSel);

                const brandObj = compObj?.Brands.find(b => b.Name === brands);
                const types = brandObj?.Types ?? [];
                fillSelect(selType, types, typeSel);
            }
        });
    </script>

}

